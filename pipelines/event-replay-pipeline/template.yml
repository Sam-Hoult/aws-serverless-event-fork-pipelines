AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  This Amazon SNS Fork pipeline buffers events from the given Amazon SNS topic into an Amazon SQS queue, so it can replay these events
  back to another pipeline, in a disaster recovery scenario.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: fork-event-replay-pipeline
    Description: >
      This Amazon SNS Fork pipeline buffers events from the given Amazon SNS topic into an Amazon SQS queue, so it can replay these events
      back to another pipeline, in a disaster recovery scenario.
    Author: AWS
    SpdxLicenseId: MIT-0
    LicenseUrl: ../../LICENSE
    ReadmeUrl: README.md
    Labels: [sns, sns-fork-pattern, event, replay]
    HomePageUrl: https://github.com/aws-samples/aws-serverless-sns-fork-pattern
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/aws-samples/aws-serverless-sns-fork-pattern/tree/1.0.0/pipelines/event-replay-pipeline

Parameters:
  SNSTopicArn:
    Description: SNS Topic ARN whose messages should be saved for replay.
    Type: String
  DestinationSQSQueueName:
    Description: >
      Name of destination SQS Queue where replay messages should be sent in a disaster recovery scenario. The app assumes the queue
      is in the same account and region as this app.
    Type: String
  SubscriptionFilterPolicy:
    Description: >
      SNS Topic Subscription FilterPolicy as a JSON string. This optional parameter allows you to configure message filtering for messages
      processed by this app. Since this app is used to buffer events for replay to another SQS queue that's also subscribed to the SNS topic,
      its subscription filter policy should match the subscription filter policy of the pipeline it will replay messages to. See
      https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html for details.
    Type: String
    Default: ''
  ReplayQueueRetentionPeriodInSeconds:
    Description: >
      Retention period in seconds for the replay buffer SQS queue. This controls how long messages will be stored in the replay queue.
    Type: Number
    MinValue: 60
    MaxValue: 1209600
    Default: 1209600
  LogLevel:
    Type: String
    Description: Log level for Lambda function logging, e.g., ERROR, INFO, DEBUG, etc
    Default: INFO

# TODO: uncomment once AWS::Serverless::Application supports Condition
#Conditions:
#  FilterPolicyEnabled:
#    !Not [!Equals [!Ref SubscriptionFilterPolicy, '']]

Resources:
  ReplaySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt ReplayQueue.Arn
      RawMessageDelivery: true
      TopicArn: !Ref SNSTopicArn

  ReplayQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: !Ref ReplayQueueRetentionPeriodInSeconds

  ReplayQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ReplayQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: ReplayQueuePolicy
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt ReplayQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopicArn

  ReplayFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: replay_messages.handler
      Runtime: python3.7
      Tracing: Active
      Timeout: 5
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          DESTINATION_SQS_QUEUE_NAME: !Ref DestinationSQSQueueName
      Policies:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - sqs:GetQueueUrl
              - sqs:SendMessage*
            Resource:
              - !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${DestinationSQSQueueName}

  ReplayFunctionMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt ReplayQueue.Arn
      FunctionName: !Ref ReplayFunction
      Enabled: false

  ReplaySubscriptionFilterPolicy:
    Type: AWS::Serverless::Application
    # TODO: uncomment once AWS::Serverless::Application supports Condition
    #Condition: FilterPolicyEnabled
    Properties:
      Location: ../../util/sns-subscription-filter-policy-string/.aws-sam/build/template.yaml
      Parameters:
        SNSTopicArn: !Ref SNSTopicArn
        SubscriptionArn: !Ref ReplaySubscription
        SubscriptionFilterPolicy: !Ref SubscriptionFilterPolicy
        LogLevel: !Ref LogLevel

Outputs:
  ReplayFunctionName:
    Description: Replay Lambda function name
    Value: !Ref ReplayFunction
  ReplayFunctionArn:
    Description: Replay Lambda function ARN
    Value: !GetAtt ReplayFunction.Arn
  ReplayFunctionMappingId:
    Description: Identifier of the event source mapping that connects the Replay Lambda function to the SQS queue
    Value: !Ref ReplayFunctionMapping
