AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  This app backs up messages from the given SNS topic to an S3 bucket using Kinesis Firehose.

Parameters:
  SNSTopicArn:
    Description: SNS Topic ARN whose messages should be backed up to S3.
    Type: String
  SubscriptionFilterPolicy:
    Description: >
      SNS Topic Subscription FilterPolicy as a JSON string. This optional parameter allows you to configure message filtering for messages
      processed by this app. See https://docs.aws.amazon.com/sns/latest/dg/message-filtering.html for details.
    Type: String
    Default: ''
  BackupPrefix:
    Description: Prefix used for S3 backup files
    Type: String
    Default: 'backup/'
  BackupCompressionFormat:
    Description: Compression format for S3 backup files
    Type: String
    AllowedValues:
      - UNCOMPRESSED
      - GZIP
      - ZIP
      - Snappy
    Default: UNCOMPRESSED
  EnableBucketEncryption:
    Description: Set to true to enable server-side encryption on the S3 backup bucket using the default aws/s3 AWS KMS master key.
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  BufferingIntervalInSeconds:
    Description: >
      Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination.
      See https://docs.aws.amazon.com/firehose/latest/APIReference/API_BufferingHints.html for details.
    Type: Number
    MinValue: 60
    MaxValue: 900
    Default: 300
  BufferingSizeInMBs:
    Description: >
      Buffer incoming data to the specified size, in MBs, before delivering it to the destination. Note, if you specify a DataTransformationLambdaFunctionArn, you should
      not set this higher than 6. See https://docs.aws.amazon.com/firehose/latest/dev/data-transformation.html for details.
    Type: Number
    MinValue: 1
    MaxValue: 128
    Default: 5
  DataTransformationLambdaFunctionArn:
    Description: >
      ARN of data transformation Lambda function. This optional parameter allows you to configure a Lambda function to be invoked by
      Kinesis Firehose to transformation incoming events before they are saved to S3. For example, you could use this to remove sensitive
      data to meet compliance regulations.
    Type: String
    Default: ''
  LogLevel:
    Type: String
    Description: Log level for Lambda function logging, e.g., ERROR, INFO, DEBUG, etc
    Default: INFO

Conditions:
  DataTransformationEnabled:
    !Not [!Equals [!Ref DataTransformationLambdaFunctionArn, '']]
  BucketEncryptionEnabled:
    !Equals [!Ref EnableBucketEncryption, 'true']
  # TODO: uncomment once AWS::Serverless::Application supports Condition
  #FilterPolicyEnabled:
  #  !Not [!Equals [!Ref SubscriptionFilterPolicy, '']]

Resources:
  Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt MessageQueue.Arn
      RawMessageDelivery: true
      TopicArn: !Ref SNSTopicArn

  MessageQueue:
    Type: AWS::SQS::Queue

  MessageQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MessageQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: MessageQueuePolicy
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt MessageQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopicArn

  ProcessRecords:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: process_records.handler
      Runtime: python3.6
      Tracing: Active
      Timeout: 5
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          FIREHOSE_DELIVERY_STREAM_NAME: !Ref DeliveryStream
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - firehose:PutRecord
            Resource:
              - !Sub ${DeliveryStream.Arn}
      Events:
        SQS:
          Type: SQS
          Properties:
            Queue: !GetAtt MessageQueue.Arn
            BatchSize: 10

  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt Backups.Arn
        RoleARN: !GetAtt DeliveryStreamRole.Arn
        Prefix: !Ref BackupPrefix
        BufferingHints:
          IntervalInSeconds: !Ref BufferingIntervalInSeconds
          SizeInMBs: !Ref BufferingSizeInMBs
        CompressionFormat: !Ref BackupCompressionFormat
        ProcessingConfiguration: !If
          - DataTransformationEnabled
          - Enabled: true
            Processors:
              - Type: Lambda
                Parameters:
                  - ParameterName: LambdaArn
                    ParameterValue: !Ref DataTransformationLambdaFunctionArn
          - !Ref AWS::NoValue

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
            - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Sub ${AWS::AccountId}
      Policies:
        - PolicyName: fh-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !GetAtt Backups.Arn
                  - !Sub ${Backups.Arn}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*
              - !If
                  - DataTransformationEnabled
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource:
                      - !Ref DataTransformationLambdaFunctionArn
                  - !Ref AWS::NoValue

  Backups:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption: !If
        - BucketEncryptionEnabled
        - ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: aws:kms
        - !Ref AWS::NoValue

  FilterPolicy:
    Type: AWS::Serverless::Application
    # TODO: uncomment once AWS::Serverless::Application supports Condition
    #Condition: FilterPolicyEnabled
    Properties:
      Location: ../../../util/sns-subscription-filter-policy-string/dist/template.yml
      Parameters:
        SNSTopicArn: !Ref SNSTopicArn
        SubscriptionArn: !Ref Subscription
        SubscriptionFilterPolicy: !Ref SubscriptionFilterPolicy
        LogLevel: !Ref LogLevel

Outputs:
  BackupBucketName:
    Description: Backup bucket name
    Value: !Ref Backups
  BackupBucketArn:
    Description: Backup bucket name
    Value: !GetAtt Backups.Arn
